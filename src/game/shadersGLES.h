// This file is part of Dust Racing 2D.
// Copyright (C) 2013 Jussi Lind <jussi.lind@iki.fi>
//
// Dust Racing 2D is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// Dust Racing 2D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Dust Racing 2D. If not, see <http://www.gnu.org/licenses/>.

#ifndef SHADERS_H
#define SHADERS_H

static const char * carVshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"attribute vec3 inVertex;\n"
"attribute vec3 inNormal;\n"
"attribute vec2 inTexCoord;\n"
"attribute vec4 inColor;\n"
"uniform vec4 pos;\n"
"uniform vec4 scale;\n"
"uniform vec2 angle;\n"
"uniform vec4 color;\n"
"uniform mat4 mvp;\n"
"uniform float fade;\n"
"uniform vec4 diffuseLightDir;\n"
"uniform vec4 diffuseLightColor;\n"
"uniform vec4 ambientLightColor;\n"
"varying vec2 texCoord0;\n"
"varying vec2 texCoord1;\n"
"varying vec4 vColor;\n"
""
"void main()\n"
"{\n"
"    float sin1 = angle.x;\n"
"    float cos1 = angle.y;\n"
""
"    mat4 transformation = mat4(\n"
"        cos1,  sin1,  0.0,   0.0,\n"
"        -sin1, cos1,  0.0,   0.0,\n"
"        0.0,   0.0,   1.0,   0.0,\n"
"        pos.x, pos.y, pos.z, 1.0);\n"
""
"    gl_Position = mvp * transformation * (vec4(inVertex, 1) * scale);\n"
""
"    float diffuseLightIntensity = dot(normalize(diffuseLightDir), vec4(-inNormal, 1)) * diffuseLightColor.a;\n"
"    vColor = inColor * color * (\n"
"        vec4(ambientLightColor.rgb, 1.0) * ambientLightColor.a +\n"
"        vec4(diffuseLightColor.rgb, 1.0) * diffuseLightIntensity) * fade;\n"
""
"    mat4 skyReflectionOrientation = mat4(\n"
"        cos1, -sin1, 0.0, 0.0,\n"
"        sin1,  cos1, 0.0, 0.0,\n"
"        0.0,    0.0, 1.0, 0.0,\n"
"        0.0,    0.0, 0.0, 1.0);\n"
""
"    texCoord0 = inTexCoord;\n"
"    texCoord1 = (vec4(inTexCoord, 0.0, 0.0) * skyReflectionOrientation).xy;\n"
"}\n";

static const char * carFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"uniform sampler2D tex0;\n"
"uniform sampler2D tex1;\n"
"varying vec2 texCoord0;\n"
"varying vec2 texCoord1;\n"
"varying vec4 vColor;\n"
""
"void main(void)\n"
"{\n"
"    vec4 texColor = texture2D(tex0, texCoord0);\n"
"    vec4 sky      = texture2D(tex1, texCoord1);\n"
""
"    if (texColor.a < 0.1)\n"
"    {\n"
"        discard;\n"
"    }\n"
"    else\n"
"    {\n"
"         // Sky reflection\n"
"         const float keyThreshold = 0.75;\n"
"         if (texColor.r < keyThreshold && texColor.g > keyThreshold && texColor.b < keyThreshold)\n"
"         {\n"
"             float intensity = 0.75;\n"
"             gl_FragColor = sky * intensity * texColor.g * vColor;\n"
"         }\n"
"         else\n"
"         {\n"
"             gl_FragColor = texColor * vColor;\n"
"         }\n"
"    }\n"
"}\n";

static const char * fboVshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"attribute vec3 inVertex;\n"
"attribute vec2 inTexCoord;\n"
"uniform vec4 pos;\n"
"uniform vec4 scale;\n"
"uniform mat4 mvp;\n"
"varying vec2 texCoord0;\n"
""
"void main()\n"
"{\n"
"    mat4 translation = mat4(\n"
"        1.0,   0.0,   0.0,   0.0,\n"
"        0.0,   1.0,   0.0,   0.0,\n"
"        0.0,   0.0,   1.0,   0.0,\n"
"        pos.x, pos.y, pos.z, 1.0);\n"
""
"    gl_Position = mvp * translation * (vec4(inVertex, 1) * scale);\n"
"    texCoord0 = inTexCoord;\n"
"}\n";

static const char * fboFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"uniform sampler2D tex0;\n"
"varying vec2 texCoord0;\n"
""
"void main(void)\n"
"{\n"
"    gl_FragColor = texture2D(tex0, texCoord0);\n"
"}\n";

static const char * masterVshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"attribute vec3 inVertex;\n"
"attribute vec3 inNormal;\n"
"attribute vec2 inTexCoord;\n"
"attribute vec4 inColor;\n"
"uniform vec4 pos;\n"
"uniform vec4 scale;\n"
"uniform vec2 angle;\n"
"uniform vec4 color;\n"
"uniform mat4 mvp;\n"
"uniform float fade;\n"
"uniform vec4 diffuseLightDir;\n"
"uniform vec4 diffuseLightColor;\n"
"uniform vec4 ambientLightColor;\n"
"varying vec2 texCoord0;\n"
"varying vec4 vColor;\n"
""
"void main()\n"
"{"
"    float sin1 = angle.x;\n"
"    float cos1 = angle.y;\n"
""
"    mat4 translation = mat4(\n"
"        cos1, sin1,  0.0,   0.0,\n"
"       -sin1, cos1,  0.0,   0.0,\n"
"         0.0, 0.0,   1.0,   0.0,\n"
"       pos.x, pos.y, pos.z, 1.0);\n"
""
"    gl_Position = mvp * translation * (vec4(inVertex, 1) * scale);\n"
""
"    float diffuseLightIntensity = dot(normalize(diffuseLightDir), vec4(-inNormal, 1)) * diffuseLightColor.a;\n"
"    vColor = inColor * color * (\n"
"    vec4(ambientLightColor.rgb, 1.0) * ambientLightColor.a +\n"
"    vec4(diffuseLightColor.rgb, 1.0) * diffuseLightIntensity) * vec4(fade, fade, fade, 1.0);\n"
""
"    texCoord0 = inTexCoord;\n"
"}\n";

static const char * masterFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"uniform sampler2D tex0;\n"
"varying vec2 texCoord0;\n"
"varying vec4 vColor;\n"
""
"void main(void)\n"
"{\n"
"    vec4 texColor = texture2D(tex0, texCoord0);\n"
""
"    if (texColor.a < 0.1)\n"
"    {\n"
"        discard;\n"
"    }\n"
"    else\n"
"    {\n"
"        gl_FragColor = vColor * texColor;\n"
"    }\n"
"}\n";

static const char * masterShadowVshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"attribute vec3 inVertex;\n"
"attribute vec3 inNormal;\n"
"attribute vec2 inTexCoord;\n"
"attribute vec4 inColor;\n"
"uniform vec4 pos;\n"
"uniform vec4 scale;\n"
"uniform vec2 angle;\n"
"uniform vec4 color;\n"
"uniform mat4 mvp;\n"
"varying vec2 texCoord0;\n"
"varying vec4 vColor;\n"
""
"void main()\n"
"{\n"
"    float sin1 = angle.x;\n"
"    float cos1 = angle.y;\n"
""
"    mat4 translation = mat4(\n"
"        cos1,  sin1,  0.0, 0.0,\n"
"        -sin1, cos1,  0.0, 0.0,\n"
"        0.0,   0.0,   0.0, 0.0,\n"
"        pos.x, pos.y, 0.0, 1.0);\n"
""
"    gl_Position = mvp * translation * (vec4(inVertex, 1) * scale);\n"
"    vColor      = inColor * color;\n"
"    texCoord0   = inTexCoord;\n"
"}\n";

static const char * masterShadowFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"uniform sampler2D texture;\n"
"varying vec2 texCoord0;\n"
""
"void main(void)\n"
"{\n"
"    vec4 color = texture2D(texture, texCoord0);\n"
"    if (color.a < 0.1)\n"
"    {\n"
"        discard;\n"
"    }\n"
"    else\n"
"    {\n"
"        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n"
"    }\n"
"}\n";

static const char * menuVshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"attribute vec3 inVertex;\n"
"attribute vec3 inNormal;\n"
"attribute vec2 inTexCoord;\n"
"attribute vec4 inColor;\n"
"uniform vec4 pos;\n"
"uniform vec4 scale;\n"
"uniform vec2 angle;\n"
"uniform vec4 color;\n"
"uniform mat4 mvp;\n"
"uniform float fade;\n"
"varying vec2 texCoord0;\n"
"varying vec4 vColor;\n"
""
"void main()\n"
"{\n"
"    float sin1 = angle.x;\n"
"    float cos1 = angle.y;\n"
""
"    mat4 translation = mat4(\n"
"        cos1,  sin1,  0.0,   0.0,\n"
"        -sin1, cos1,  0.0,   0.0,\n"
"        0.0,   0.0,   1.0,   0.0,\n"
"        pos.x, pos.y, pos.z, 1.0);\n"
""
"    gl_Position = mvp * translation * (vec4(inVertex, 1) * scale);\n"
"    vColor      = inColor * color * fade;\n"
"    texCoord0   = inTexCoord;\n"
"}\n";

static const char * menuFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"uniform sampler2D tex0;\n"
"varying vec2 texCoord0;\n"
"varying vec4 vColor;\n"
""
"void main(void)\n"
"{\n"
"    vec4 texColor = texture2D(tex0, texCoord0);\n"
"    if (texColor.a < 0.1)\n"
"    {\n"
"        discard;\n"
"    }\n"
"    else\n"
"    {\n"
"        gl_FragColor = vColor * texColor;\n"
"    }\n"
"}\n";

static const char * particleFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"varying vec4 vColor;\n"
""
"void main(void)\n"
"{\n"
"    gl_FragColor = vColor;\n"
"}\n";

static const char * pointParticleVshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"attribute vec3 inVertex;\n"
"attribute vec3 inNormal;\n"
"attribute vec4 inColor;\n"
"uniform mat4 mvp;\n"
"uniform float fade;\n"
"varying vec4 rotationMatrixTegra3Hack;\n"
"varying vec4 vColor;\n"
""
"void main()\n"
"{\n"
"    gl_Position = mvp * vec4(inVertex, 1);\n"
"    vColor = inColor * fade;\n"
""
"    // Rotation matrix to rotate a point sprite (sin and cos delivered as normals)\n"
"    // The matrix is delivered as a vec4, as on Nexus 7 gives error if mat2 is used:\n"
"    // L0007: Cannot find vertex shader varying for declared fragment shader varyingrotationMatrix\n"
"    rotationMatrixTegra3Hack = vec4(inNormal.x, inNormal.y, -inNormal.y, inNormal.x);\n"
"}\n";

static const char * pointParticleFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"uniform sampler2D tex0;\n"
"varying vec4 vColor;\n"
""
"void main(void)\n"
"{\n"
"    gl_FragColor = texture2D(tex0, gl_PointCoord) * vColor;\n"
"}\n";

static const char * pointParticleDiscardFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"uniform sampler2D tex0;\n"
"varying vec4 rotationMatrixTegra3Hack;\n"
"varying vec4 vColor;\n"
""
"void main(void)\n"
"{\n"
"    mat2 rotationMatrix = mat2(rotationMatrixTegra3Hack.x, rotationMatrixTegra3Hack.y, rotationMatrixTegra3Hack.z, rotationMatrixTegra3Hack.w);\n"
"    vec4 texColor = texture2D(tex0, rotationMatrix * gl_PointCoord) * vColor * 0.5;\n"
"    if (texColor.a < 0.1)\n"
"    {\n"
"        discard;\n"
"    }\n"
"    else\n"
"    {\n"
"        gl_FragColor = texColor;\n"
"    }\n"
"}\n";

static const char * textVshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"attribute vec3 inVertex;\n"
"attribute vec3 inNormal;\n"
"attribute vec2 inTexCoord;\n"
"attribute vec4 inColor;\n"
"uniform vec4 pos;\n"
"uniform vec4 scale;\n"
"uniform vec4 color;\n"
"uniform mat4 mvp;\n"
"uniform float fade;\n"
"varying vec2 texCoord0;\n"
"varying vec4 vColor;\n"
""
"void main()\n"
"{\n"
"    gl_Position = mvp * (vec4(inVertex, 1) * scale + pos);\n"
"    vColor      = inColor * color * fade;\n"
"    texCoord0   = inTexCoord;\n"
"}\n";

static const char * textFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"uniform sampler2D tex0;\n"
"varying vec2 texCoord0;\n"
"varying vec4 vColor;\n"
""
"void main(void)\n"
"{\n"
"    vec4 texColor = texture2D(tex0, texCoord0);\n"
""
"    if (texColor.a < 0.1)\n"
"    {\n"
"        discard;\n"
"    }\n"
"    else\n"
"    {\n"
"        gl_FragColor = vColor * texColor;\n"
"    }\n"
"}\n";

static const char * textShadowFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"uniform sampler2D texture;\n"
"varying vec2 texCoord0;\n"
""
"void main(void)\n"
"{\n"
"    vec4 color = texture2D(texture, texCoord0);\n"
"    if (color.a < 0.1)\n"
"    {\n"
"        discard;\n"
"    }\n"
"    else\n"
"    {\n"
"        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n"
"    }\n"
"}\n";

static const char * tileVshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"attribute vec3 inVertex;\n"
"attribute vec3 inNormal;\n"
"attribute vec2 inTexCoord;\n"
"attribute vec4 inColor;\n"
"uniform vec4 pos;\n"
"uniform vec4 scale;\n"
"uniform vec2 angle;\n"
"uniform mat4 mvp;\n"
"uniform float fade;\n"
"uniform vec4 diffuseLightDir;\n"
"uniform vec4 diffuseLightColor;\n"
"uniform vec4 ambientLightColor;\n"
"varying vec2 texCoord0;\n"
"varying vec2 texCoord1;\n"
"varying vec4 vColor;\n"
""
"void main()\n"
"{\n"
"    float sin1 = angle.x;\n"
"    float cos1 = angle.y;\n"
""
"    mat4 transformation = mat4(\n"
"        cos1,  sin1,  0.0,   0.0,\n"
"        -sin1, cos1,  0.0,   0.0,\n"
"        0.0,   0.0,   1.0,   0.0,\n"
"        pos.x, pos.y, pos.z, 1.0);\n"
""
"    gl_Position = mvp * transformation * vec4(inVertex, 1);\n"
"    float diffuseLightIntensity = dot(normalize(diffuseLightDir), vec4(-inNormal, 1)) * diffuseLightColor.a;\n"
"    vColor = inColor * (\n"
"        vec4(ambientLightColor.rgb, 1.0) * ambientLightColor.a +\n"
"        vec4(diffuseLightColor.rgb, 1.0) * diffuseLightIntensity) * fade;\n"
""
"    texCoord0 = inTexCoord;\n"
"    texCoord1 = inTexCoord;\n"
"}\n";

static const char * tile2dFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"uniform sampler2D tex0;\n"
"varying vec2 texCoord0;\n"
"varying vec4 vColor;\n"
""
"void main(void)\n"
"{\n"
"    vec4 texColor = texture2D(tex0, texCoord0);\n"
"    if (texColor.a < 0.1)\n"
"    {\n"
"        discard;\n"
"    }\n"
"    else\n"
"    {\n"
"        gl_FragColor = texColor * vColor;\n"
"    }\n"
"}\n";

static const char * tile3dFshDesktop =
"#version 100\n"
""
"precision mediump float;\n"
"precision mediump int;\n"
"uniform sampler2D tex0;\n"
"uniform sampler2D tex1;\n"
"uniform sampler2D tex2;\n"
"varying vec2 texCoord0;\n"
"varying vec4 vColor;\n"
""
"void main(void)\n"
"{\n"
"    vec4 color0 = texture2D(tex0, texCoord0);\n"
"    vec4 color1 = texture2D(tex1, texCoord0);\n"
"    vec4 color2 = texture2D(tex2, texCoord0);\n"
""
"    if (color0.a < 0.1)\n"
"    {\n"
"        discard;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (color0.r == 0.0 && color0.b == 0.0)\n"
"        {\n"
"            color0 = mix(color1, color2, color0.g);\n"
"        }\n"
"        else if (color0.g == 0.0 && color0.b == 0.0)\n"
"        {\n"
"            color0 = color1;\n"
"        }\n"
""
"        gl_FragColor = color0 * vColor;\n"
"    }\n"
"}\n";

#endif // SHADERS_H
